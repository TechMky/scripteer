{"version":3,"sources":["queries/index.js","queries/service.js","context/AppContext.js","components/BatchSelector.js","components/FeedbackTable.js","components/FeedbackReport.js","urlLinks.js","pages/Home.js","pages/Login.js","layout/MainLayout.js","App.js","serviceWorker.js","index.js"],"names":["QUERIES","operationName","variables","query","console","log","process","EMAIL","service","axios","create","baseURL","method","setInterceptor","accessToken","interceptors","request","use","config","headers","Authorization","getToken","email","password","a","data","post","response","login","token","localStorage","setItem","err","batches","batchId","batch_id","students","getAllStudents","instructorId","instructor_id","feedbacks","instFeedback","AppContext","React","createContext","AppProvider","props","presentToken","getItem","useState","setStateToken","setBatches","activeBatch","setActiveBatch","Provider","value","setToken","newToken","children","Consumer","withRouter","useContext","useEffect","getAllBatch","then","Array","isArray","history","push","gutter","className","map","batch","name","hoverable","onClick","title","description","FeedbackTable","studentsMemo","rowData","feedback","index","studentId","student","student_id","filter","std","user_id","key","curriculumName","curriculum_name","studentName","feedbackText","rating","sessionDate","session_created_at","columns","dataIndex","render","allowHalf","disabled","dateString","Date","Number","toLocaleDateString","month","year","dataSource","FeedbackReport","setStudents","setFeedbacks","getAllStudentsPromise","getInstructorFeedbackPromise","getInstructorFeedback","decode","complete","payload","userId","Promise","all","valuesArray","BASE_URL","LOGIN_URL","Home","to","onFinish","values","justify","span","md","initialValues","style","margin","Item","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","htmlType","Content","Layout","Header","Footer","MainLayout","App","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kcAAaA,EAEC,6BAFDA,EAGF,CACH,cAAiB,KACjB,UAAa,CACT,MAAS,GACT,SAAY,GACZ,QAAW,OAEf,MAAS,8UAVJA,EA8BA,CACLC,cAAe,KACfC,UAAW,GACXC,MAAO,uLAjCFH,EAwCY,CACjB,cAAiB,KACjB,UAAa,CACT,SAAY,GACZ,cAAiB,OAErB,MAAS,8VA9CJA,EAgDK,CACV,cAAiB,KACjB,UAAa,CACT,SAAY,IAEhB,MAAS,kwBAIjBI,QAAQC,IAAR,mCAAsCC,0NAAYC,OCtDlD,IAAMC,EAAUC,IAAMC,OAAO,CAAEC,QAASX,EAAkBY,OAAQ,SAE3D,SAASC,EAAeC,GAC3BN,EAAQO,aAAaC,QAAQC,KAAI,SAAUC,GAEvC,OADAA,EAAOC,QAAQC,cAAgBN,EAAW,iBAAaA,GAAgB,GAChEI,KAIR,SAAeG,EAAtB,oC,4CAAO,WAAwBC,EAAOC,GAA/B,mBAAAC,EAAA,6DAEGC,EAAOzB,GAERE,UAAUoB,MAAQA,EACvBG,EAAKvB,UAAUqB,SAAWA,EALvB,kBAQyBf,EAAQkB,KAAK,IAAKD,GAR3C,cAQOE,EARP,OAQkDF,KACjDrB,QAAQC,IAAI,kEAAyDsB,GAIrEd,EAFMC,EAAca,EAASF,KAAKG,MAAMC,OAIxCC,aAAaC,QAAQ,QAASjB,GAf/B,kBAiBQ,CAAEkB,IAAK,KAAMH,MAAOf,IAjB5B,yCAoBCV,QAAQC,IAAI,+DAAZ,MApBD,kBAqBQ,CAAE2B,IAAI,EAAD,KArBb,2D,kEA4BA,8BAAAR,EAAA,6DAEGC,EAAOzB,EAFV,kBAKyBQ,EAAQkB,KAAK,IAAKD,GAL3C,cAKOE,EALP,OAKkDF,KACjDrB,QAAQC,IAAI,qEAA4DsB,GANzE,kBASQ,CAAEK,IAAK,KAAMC,QAASN,EAASF,KAAKQ,QAAQR,OATpD,uCAYCrB,QAAQC,IAAI,kEAAZ,MAZD,kBAcQ,CAAE2B,IAAI,EAAD,KAdb,0D,kEAoBA,WAA8BE,GAA9B,iBAAAV,EAAA,6DAEGC,EAAOzB,GACRE,UAAUiC,SAAWD,EAHvB,kBAOyB1B,EAAQkB,KAAK,IAAKD,GAP3C,cAOOE,EAPP,OAOkDF,KACjDrB,QAAQC,IAAI,wEAA+DsB,GAR5E,kBAWQ,CAAEK,IAAK,KAAMI,SAAUT,EAASF,KAAKY,eAAeZ,OAX5D,yCAcCrB,QAAQC,IAAI,qEAAZ,MAdD,kBAgBQ,CAAE2B,IAAI,EAAD,KAhBb,2D,kEAuBA,WAAqCM,EAAcJ,GAAnD,iBAAAV,EAAA,6DAEGC,EAAOzB,GACRE,UAAUiC,SAAWD,EAC1BT,EAAKvB,UAAUqC,cAAgBD,EAJ5B,kBAQyB9B,EAAQkB,KAAK,IAAKD,GAR3C,cAQOE,EARP,OAQkDF,KACjDrB,QAAQC,IAAI,+EAAsEsB,GATnF,kBAYQ,CAAEK,IAAK,KAAMQ,UAAWb,EAASF,KAAKgB,aAAahB,OAZ3D,yCAeCrB,QAAQC,IAAI,4EAAZ,MAfD,kBAiBQ,CAAE2B,IAAI,EAAD,KAjBb,2D,kCC/EDU,EAAaC,IAAMC,cAAc,IAIhC,SAASC,EAAYC,GAExB,IAAMC,EAAejB,aAAakB,QAAQ,SAEtCD,GACAlC,EAAekC,GAGnB,MAA+BE,mBAASF,GAAgB,MAAxD,mBAAOlB,EAAP,KAAcqB,EAAd,KACA,EAA8BD,mBAAS,IAAvC,mBAAOhB,EAAP,KAAgBkB,EAAhB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAMA,OACI,cAACX,EAAWY,SAAZ,CAAqBC,MAAO,CAAC1B,QAAO2B,SALvB,SAACC,GACd5C,EAAe4C,GACfP,EAAcO,IAGgCxB,UAASkB,aAAYC,cAAaC,kBAAhF,SACKP,EAAMY,WAKQhB,EAAWiB,SAA/B,IAGQjB,I,4CCcAkB,mBAzCf,SAAuBd,GAEnB,MAA6De,qBAAWnB,GAAhET,EAAR,EAAQA,QAASkB,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,eAsB1C,OApBAS,qBAAU,YF6BP,WAAP,gCE3BQC,GAAcC,MAAK,YAAkB,IAAf/B,EAAc,EAAdA,QAEdgC,MAAMC,QAAQjC,IACdkB,EAAW,YAAIlB,IACfoB,EAAepB,EAAQ,GAAGE,WAG1BW,EAAMqB,QAAQC,KAAK,eAO5B,CAACjB,EAAYE,EAAgBP,EAAMqB,UAKlC,cAAC,IAAD,CAAKE,OAAQ,GAAIC,UAAU,OAA3B,SACKrC,EAAQsC,KAAI,SAAAC,GACT,IAAkBtC,EAAkBsC,EAA5BrC,SAAmBsC,EAASD,EAATC,KAC3B,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,kBAAMtB,EAAenB,IAAUoC,UAAS,UAAKlB,IAAgBlB,EAAU,eAAiB,GAAhD,KAAjE,SACI,cAAC,IAAD,CAAM0C,MAAOH,EAAMI,YAAW,oBAAe3C,MAD4EA,IADvHA,W,2BC+Cf4C,MAhFf,SAAuBhC,GAEnB,IAAON,EAAuBM,EAAvBN,UAAWJ,EAAYU,EAAZV,SAGZ2C,EAAe,GAQfC,EAAO,OAAGxC,QAAH,IAAGA,OAAH,EAAGA,EAAW+B,KAAI,SAACU,EAAUC,GAAW,IAAD,EAN3BC,EAQjBC,EAAU,GAcd,OAZIL,EAAaE,EAASI,YACtBD,EAAWL,EAAaE,EAASI,aAXhBF,EAeSF,EAASI,WAAnCD,EAbGhD,EAASkD,QAAO,SAAAC,GAAG,OAAIA,EAAIC,UAAYL,KAAW,GAcrDJ,EAAaE,EAASI,YAAcD,GAMjC,CACHK,IAAI,GAAD,OAAKR,EAASI,WAAd,YAA4BH,GAC/BQ,eAAgBT,EAASU,gBACzBR,UAAWF,EAASI,WACpBO,YAAW,UAAER,SAAF,aAAE,EAASX,KACtBoB,aAAcZ,EAASA,SACvBa,OAAQb,EAASa,OACjBC,YAAad,EAASe,uBAMxBC,EAAU,CACZ,CACIrB,MAAO,kBACPa,IAAK,iBACLS,UAAW,kBAEf,CACItB,MAAO,SACPa,IAAK,SACLS,UAAW,SACXC,OAAQ,SAAAL,GAAM,OAAI,cAAC,IAAD,CAAMM,WAAS,EAACC,UAAQ,EAAC9C,MAAOuC,MAEtD,CACIlB,MAAO,WACPa,IAAK,eACLS,UAAW,gBAEf,CACItB,MAAO,eACPa,IAAK,cACLS,UAAW,eAEf,CACItB,MAAO,OACPa,IAAK,cACLS,UAAW,cACXC,OAAQ,SAAAG,GAAU,OAAI,IAAIC,KAAKC,OAAOF,IAAaG,mBAAmB,QAAS,CAACC,MAAO,QAASC,KAAM,UAAW,IAAO,eAKhI,OACI,8BACI,cAAC,IAAD,CAAOV,QAASA,EAASW,WAAY5B,OCpClC6B,MApCf,WAEI,MAA6BhD,qBAAWnB,GAAjCU,EAAP,EAAOA,YAAavB,EAApB,EAAoBA,MAEpB,EAAgCoB,mBAAS,IAAzC,mBAAOb,EAAP,KAAiB0E,EAAjB,KAEA,EAAkC7D,mBAAS,IAA3C,mBAAOT,EAAP,KAAkBuE,EAAlB,KAuBA,OArBAjD,qBAAU,WAGN,IAAMkD,EJ2CP,SAAP,kCI3CsC3E,CAAee,GAGvC6D,EJ+DP,SAAP,oCI/D6CC,CADhBC,iBAAOtF,EAAO,CAACuF,UAAU,IAAOC,QAAQC,OACYlE,GASzE,OAPAmE,QAAQC,IAAI,CAACR,EAAuBC,IAA+BjD,MAAK,SAAAyD,GACpE,kBAA8BA,EAA9B,GAAOrF,EAAP,KAAiBI,EAAjB,KACAsE,EAAY1E,EAASA,UACrB2E,EAAavE,EAAUA,cAIpB,WACHsE,EAAY,IACZC,EAAa,OAElB,CAAC3D,EAAa0D,EAAajF,IAG1B,mCACE,cAAC,EAAD,CAAeO,SAAUA,EAAUI,UAAWA,OCrC3CkF,EAAW,aAEXC,EAAS,UAAMD,EAAN,UCuBPE,MAlBf,WAKE,OAHgB/D,qBAAWnB,GAApBb,MASL,sBAAKyC,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAPK,cAAC,IAAD,CAAUuD,GAAIF,K,4CCyDV/D,mBA9Df,SAAed,GAGX,IAAQU,EAAaK,qBAAWnB,GAAxBc,SAIFsE,EAAQ,uCAAG,WAAOC,GAAP,uBAAAvG,EAAA,6DACbpB,QAAQC,IAAI,WAAY0H,GAChBzG,EAAmByG,EAAnBzG,MAAOC,EAAYwG,EAAZxG,SAFF,SAIgBF,EAASC,EAAOC,GAJhC,gBAILS,EAJK,EAILA,IAAKH,EAJA,EAIAA,MACRG,IACDwB,EAAS3B,GACTiB,EAAMqB,QAAQC,KAAKsD,IAPV,2CAAH,sDAed,OACI,cAAC,IAAD,CAAKM,QAAQ,SAAb,SACI,cAAC,IAAD,CAAKC,KAAM,GAAIC,GAAI,EAAnB,SACI,eAAC,IAAD,CACIzD,KAAK,eACLH,UAAU,aACV6D,cAAe,CAAE7G,MAAO,GAAIC,SAAU,IACtCuG,SAAUA,EACVM,MAAO,CAACC,OAAQ,aALpB,UAOI,cAAC,IAAKC,KAAN,CACI7D,KAAK,QACL8D,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAFvC,SAII,cAAC,IAAD,CAAOC,OAAQ,cAACC,EAAA,EAAD,CAAcrE,UAAU,wBAA0BsE,YAAY,eAEjF,cAAC,IAAKN,KAAN,CACI7D,KAAK,WACL8D,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAFvC,SAII,cAAC,IAAD,CACIC,OAAQ,cAACG,EAAA,EAAD,CAAcvE,UAAU,wBAChCwE,KAAK,WACLF,YAAY,eAIpB,cAAC,IAAKN,KAAN,UACI,cAAC,IAAD,CAAQQ,KAAK,UAAUC,SAAS,SAASzE,UAAU,oBAAnD,gC,SCvDhB0E,EAA4BC,IAA5BD,QAASE,GAAmBD,IAAnBC,OAAQC,GAAWF,IAAXE,OAkBVC,OAhBf,SAAoBtG,GAChB,OACI,eAAC,IAAD,WACI,cAACoG,GAAD,IACA,cAACF,EAAD,UACI,cAAC,IAAD,CAAKhB,QAAQ,SAAb,SACI,cAAC,IAAD,CAAKC,KAAM,GAAX,SACKnF,EAAMY,eAInB,cAACyF,GAAD,yBCaGE,OAnBf,WACE,OACE,cAACxG,EAAD,UACE,cAAC,GAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyG,KAAM3B,EAAb,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAO2B,KAAM5B,EAAb,SACE,cAAC,EAAD,gBCRM6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASzD,OAAO,cAAC,GAAD,IAAS0D,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjG,MAAK,SAAAkG,GACjCA,EAAaC,kB","file":"static/js/main.be297f6a.chunk.js","sourcesContent":["export const QUERIES = {\r\n    \r\n    BASE_URL: 'https://pluto.attainu.com/',\r\n    LOGIN: {\r\n        \"operationName\": null,\r\n        \"variables\": {\r\n            \"email\": \"\",\r\n            \"password\": \"\",\r\n            \"appType\": \"UNI\"\r\n        },\r\n        \"query\": \"mutation ($email: String!, $password: String!, $appType: String!) {\\n  login(data: {email: $email, password: $password, appType: $appType}) {\\n    success\\n    token\\n    message\\n    userId\\n    userRoles\\n    data {\\n      name\\n      email\\n      phone\\n      paymentDetailsId\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    },\r\n    INSTRUCTOR_PROFILE: {\r\n        \"operationName\": null,\r\n        \"variables\": {\r\n            \r\n        },\r\n        \"query\": \"{\\n  userDetails {\\n    success\\n    message\\n    data {\\n      id\\n      firstname\\n      lastname\\n      phone\\n      email\\n      linkedin_url\\n      profile_pic\\n      specialization\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    },\r\n    EVALUATE: { \r\n        \"operationName\": null, \r\n        \"variables\": { \r\n            \"userId\": 76743, \r\n            \"testId\": 290, \r\n            \"feedback\": \"- Should have used an ORM for SQL\", \r\n            \"performanceScores\": [{ \"topic_id\": 2, \"topic_name\": \"Back-End\", \"max_mark\": 100, \"marks\": 77 }], \r\n            \"testType\": \"\" \r\n        }, \r\n        \"query\": \"mutation ($testId: Int!, $userId: Int!, $feedback: String, $testType: String, $reason: String, $performanceScores: [PerformanceScoresType]) {\\n  evaluateTest(data: {testId: $testId, userId: $userId, feedback: $feedback, testType: $testType, reason: $reason, performanceScores: $performanceScores}) {\\n    success\\n    message\\n    __typename\\n  }\\n}\\n\" \r\n    },\r\n    BATCHES: {\r\n        operationName: null,\r\n        variables: {},\r\n        query: \"{\\n  batches {\\n    success\\n    message\\n    data {\\n      course_id\\n      batch_id\\n      name\\n      start_date\\n      title\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    },\r\n    USER_PROFILE: {\r\n        \"operationName\": null,\r\n        \"variables\": {},\r\n        \"query\": \"{\\n  userDetails {\\n    success\\n    message\\n    data {\\n      id\\n      firstname\\n      lastname\\n      phone\\n      email\\n      linkedin_url\\n      profile_pic\\n      specialization\\n      subscription_plan\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    },\r\n    INSTRUCTOR_FEEDBACK: {\r\n        \"operationName\": null,\r\n        \"variables\": {\r\n            \"batch_id\": 17,\r\n            \"instructor_id\": 93044\r\n        },\r\n        \"query\": \"query ($batch_id: Int!, $instructor_id: Int!) {\\n  instFeedback(batch_id: $batch_id, instructor_id: $instructor_id) {\\n    success\\n    message\\n    data {\\n      curriculum_name\\n      attendance_id\\n      rating\\n      feedback\\n      student_id\\n      session_created_at\\n      attendances_at\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    },\r\n    ALL_STUDENTS: {\r\n        \"operationName\": null,\r\n        \"variables\": {\r\n            \"batch_id\": 17\r\n        },\r\n        \"query\": \"query ($batch_id: Int!, $test_id: Int) {\\n  getAllStudents(batch_id: $batch_id, test_id: $test_id) {\\n    success\\n    message\\n    data {\\n      user_id\\n      name\\n      email\\n      roll_number\\n      is_active\\n      submission_url {\\n        github_url\\n        deployed_url\\n        hackerrank\\n        hackerearth\\n        project_report\\n        google_drive\\n        __typename\\n      }\\n      status\\n      result\\n      scores {\\n        topic_id\\n        topic_name\\n        marks\\n        max_mark\\n        __typename\\n      }\\n      plag_result {\\n        percent\\n        url\\n        __typename\\n      }\\n      plag_false_positive\\n      feedback_for_plag\\n      plag_completed_at\\n      plag_error\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"\r\n    }\r\n    \r\n}\r\nconsole.log(`🚀 ~ process.env.EMAIL`, process.env.EMAIL)","import axios from 'axios';\r\nimport { QUERIES } from '.';\r\n\r\nconst service = axios.create({ baseURL: QUERIES.BASE_URL, method: 'POST' })\r\n\r\nexport function setInterceptor(accessToken) {\r\n    service.interceptors.request.use(function (config) {\r\n        config.headers.Authorization = accessToken ? `Bearer ${accessToken}` : '';\r\n        return config;\r\n    });\r\n}\r\n\r\nexport async function getToken(email, password) {\r\n\r\n    const data = QUERIES.LOGIN\r\n\r\n    data.variables.email = email\r\n    data.variables.password = password\r\n\r\n    try {\r\n        const response = (await service.post('/', data)).data\r\n        console.log(\"🚀 ~ file: service.js ~ line 16 ~ getToken ~ response\", response)\r\n\r\n        const accessToken = response.data.login.token\r\n        // Set the AUTH token for any request\r\n        setInterceptor(accessToken)\r\n\r\n        localStorage.setItem('token', accessToken)\r\n\r\n        return { err: null, token: accessToken };\r\n\r\n    } catch (error) {\r\n        console.log(\"🚀 ~ file: service.js ~ line 19 ~ getToken ~ error\", error)\r\n        return { err: error }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport async function getAllBatch() {\r\n\r\n    const data = QUERIES.BATCHES\r\n\r\n    try {\r\n        const response = (await service.post('/', data)).data\r\n        console.log(\"🚀 ~ file: service.js ~ line 39 ~ getAllBatch ~ response\", response)\r\n\r\n\r\n        return { err: null, batches: response.data.batches.data };\r\n\r\n    } catch (error) {\r\n        console.log(\"🚀 ~ file: service.js ~ line 44 ~ getAllBatch ~ error\", error)\r\n\r\n        return { err: error }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function getAllStudents(batchId) {\r\n\r\n    const data = QUERIES.ALL_STUDENTS\r\n    data.variables.batch_id = batchId\r\n\r\n    try {\r\n\r\n        const response = (await service.post('/', data)).data\r\n        console.log(\"🚀 ~ file: service.js ~ line 39 ~ getAllStudents ~ response\", response)\r\n\r\n\r\n        return { err: null, students: response.data.getAllStudents.data };\r\n\r\n    } catch (error) {\r\n        console.log(\"🚀 ~ file: service.js ~ line 44 ~ getAllStudents ~ error\", error)\r\n\r\n        return { err: error }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport async function getInstructorFeedback(instructorId, batchId) {\r\n\r\n    const data = QUERIES.INSTRUCTOR_FEEDBACK\r\n    data.variables.batch_id = batchId\r\n    data.variables.instructor_id = instructorId\r\n\r\n    try {\r\n\r\n        const response = (await service.post('/', data)).data\r\n        console.log(\"🚀 ~ file: service.js ~ line 39 ~ getInstructorFeedback ~ response\", response)\r\n\r\n\r\n        return { err: null, feedbacks: response.data.instFeedback.data };\r\n\r\n    } catch (error) {\r\n        console.log(\"🚀 ~ file: service.js ~ line 44 ~ getInstructorFeedback ~ error\", error)\r\n\r\n        return { err: error }\r\n    }\r\n\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { setInterceptor } from \"../queries/service\";\r\n\r\n\r\nconst AppContext = React.createContext({});\r\n\r\n// creating Provider and Consumer and exporting them.\r\n\r\nexport function AppProvider(props){\r\n\r\n    const presentToken = localStorage.getItem('token')\r\n\r\n    if (presentToken) {\r\n        setInterceptor(presentToken)\r\n    }\r\n\r\n    const [token, setStateToken] = useState(presentToken || null)\r\n    const [batches, setBatches] = useState([])\r\n    const [activeBatch, setActiveBatch] = useState(0)\r\n\r\n    const setToken = (newToken) => {\r\n        setInterceptor(newToken)\r\n        setStateToken(newToken)\r\n    }\r\n    return (\r\n        <AppContext.Provider value={{token, setToken, batches, setBatches, activeBatch, setActiveBatch}}>\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport const AppConsumer = AppContext.Consumer\r\n\r\n\r\nexport default AppContext;","import React, { useContext, useEffect } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport AppContext from '../context/AppContext'\r\nimport { getAllBatch } from '../queries/service'\r\nimport { Card, Col, Row } from \"antd\";\r\nimport Meta from 'antd/lib/card/Meta';\r\n\r\nfunction BatchSelector(props) {\r\n\r\n    const { batches, setBatches, activeBatch, setActiveBatch } = useContext(AppContext)\r\n\r\n    useEffect(() => {\r\n\r\n        getAllBatch().then(({ batches }) => {\r\n\r\n            if (Array.isArray(batches)) {\r\n                setBatches([...batches])\r\n                setActiveBatch(batches[0].batch_id)\r\n            } else {\r\n\r\n                props.history.push('/login')\r\n\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }, [setBatches, setActiveBatch, props.history])\r\n\r\n\r\n\r\n    return (\r\n        <Row gutter={16} className='my-2'>\r\n            {batches.map(batch => {\r\n                const { batch_id: batchId, name } = batch\r\n                return (\r\n                    <Col key={batchId}>\r\n                        <Card hoverable onClick={() => setActiveBatch(batchId)} className={`${activeBatch === batchId ? 'active-batch' : ''} `} key={batchId}>\r\n                            <Meta title={name} description={`Batch Id: ${batchId}`} />\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n\r\n            })}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default withRouter(BatchSelector)\r\n","import React from 'react'\r\nimport { Table, Rate } from \"antd\";\r\n\r\nfunction FeedbackTable(props) {\r\n\r\n    const {feedbacks, students} = props\r\n\r\n\r\n    const studentsMemo = {}\r\n\r\n    function findStudentById(studentId) {\r\n\r\n        return students.filter(std => std.user_id === studentId)[0]\r\n\r\n    }\r\n\r\n    const rowData = feedbacks?.map((feedback, index) => {\r\n        \r\n        let student = {}\r\n        \r\n        if (studentsMemo[feedback.student_id]) {\r\n            student =  studentsMemo[feedback.student_id]\r\n            // console.log(true)\r\n            // console.log(studentsMemo)\r\n        }else{\r\n            student = findStudentById(feedback.student_id)\r\n            studentsMemo[feedback.student_id] = student\r\n            // console.log(false)\r\n            // console.log(studentsMemo)\r\n        }\r\n        \r\n        \r\n        return {\r\n            key: `${feedback.student_id}-${index}`,\r\n            curriculumName: feedback.curriculum_name,\r\n            studentId: feedback.student_id,\r\n            studentName: student?.name,\r\n            feedbackText: feedback.feedback,\r\n            rating: feedback.rating,\r\n            sessionDate: feedback.session_created_at\r\n        }\r\n\r\n\r\n    })\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Curriculum Name',\r\n            key: 'curriculumName',\r\n            dataIndex: \"curriculumName\"\r\n        },\r\n        {\r\n            title: 'Rating',\r\n            key: 'rating',\r\n            dataIndex: \"rating\",\r\n            render: rating => <Rate allowHalf disabled value={rating}/>\r\n        },\r\n        {\r\n            title: 'Feedback',\r\n            key: 'feedbackText',\r\n            dataIndex: \"feedbackText\"\r\n        },\r\n        {\r\n            title: 'Student Name',\r\n            key: 'studentName',\r\n            dataIndex: 'studentName',\r\n        },\r\n        {\r\n            title: 'Date',\r\n            key: 'sessionDate',\r\n            dataIndex: 'sessionDate',\r\n            render: dateString => new Date(Number(dateString)).toLocaleDateString('en-GB', {month: 'short', year: 'numeric', 'day': 'numeric'})\r\n        }\r\n    ]\r\n\r\n    //TODO Use row data to show table\r\n    return (\r\n        <div>\r\n            <Table columns={columns} dataSource={rowData}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeedbackTable\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport AppContext from '../context/AppContext'\r\nimport { getAllStudents, getInstructorFeedback } from '../queries/service'\r\nimport { decode } from \"jsonwebtoken\";\r\nimport FeedbackTable from './FeedbackTable';\r\n\r\nfunction FeedbackReport() {\r\n\r\n    const {activeBatch, token} = useContext(AppContext)\r\n\r\n    const [students, setStudents] = useState([])\r\n    \r\n    const [feedbacks, setFeedbacks] = useState([])\r\n    \r\n    useEffect(() => {\r\n        \r\n        \r\n        const getAllStudentsPromise = getAllStudents(activeBatch)\r\n        \r\n        const instructorId = decode(token, {complete: true}).payload.userId\r\n        const getInstructorFeedbackPromise = getInstructorFeedback(instructorId, activeBatch)\r\n\r\n        Promise.all([getAllStudentsPromise, getInstructorFeedbackPromise]).then(valuesArray => {\r\n            const [students, feedbacks] = valuesArray;\r\n            setStudents(students.students)\r\n            setFeedbacks(feedbacks.feedbacks)\r\n           \r\n        })\r\n        \r\n        return () => {\r\n            setStudents([])\r\n            setFeedbacks([])\r\n        }\r\n    }, [activeBatch, setStudents, token])\r\n\r\n    return (\r\n        <>\r\n          <FeedbackTable students={students} feedbacks={feedbacks} />            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FeedbackReport\r\n","export const BASE_URL = '/scripteer'\r\n\r\nexport const LOGIN_URL = `${BASE_URL}/login`\r\n","import React, { useContext } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport BatchSelector from '../components/BatchSelector';\r\nimport FeedbackReport from '../components/FeedbackReport';\r\nimport AppContext from '../context/AppContext';\r\nimport { LOGIN_URL } from '../urlLinks';\r\n\r\nfunction Home() {\r\n\r\n  const {token} = useContext(AppContext);\r\n\r\n\r\n  if (!token) {\r\n    return <Redirect to={LOGIN_URL}/>\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <BatchSelector />\r\n      <FeedbackReport />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useContext } from 'react'\r\nimport { withRouter } from 'react-router';\r\nimport AppContext from '../context/AppContext';\r\nimport { getToken } from '../queries/service';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { BASE_URL } from '../urlLinks';\r\n\r\nfunction Login(props) {\r\n\r\n\r\n    const { setToken } = useContext(AppContext)\r\n\r\n\r\n\r\n    const onFinish = async (values) => {\r\n        console.log('Success:', values);\r\n        const { email, password} = values\r\n\r\n        const { err, token } = await getToken(email, password)\r\n        if (!err) {\r\n            setToken(token)\r\n            props.history.push(BASE_URL)\r\n        }\r\n    };\r\n\r\n    // const onFinishFailed = (errorInfo) => {\r\n    //     console.log('Failed:', errorInfo);\r\n    // };\r\n\r\n    return (\r\n        <Row justify=\"center\" >\r\n            <Col span={12} md={8}>\r\n                <Form\r\n                    name=\"normal_login\"\r\n                    className=\"login-form\"\r\n                    initialValues={{ email: \"\", password: \"\" }}\r\n                    onFinish={onFinish}\r\n                    style={{margin: '1rem 1rem'}}\r\n                >\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        rules={[{ required: true, message: 'Please input your Email!' }]}\r\n                    >\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: 'Please input your Password!' }]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Log in\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n\r\n        </Row>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(Login)\r\n","import React from 'react'\r\nimport { Layout, Row, Col } from \"antd\";\r\n\r\nconst { Content, Header, Footer } = Layout\r\n\r\nfunction MainLayout(props) {\r\n    return (\r\n        <Layout>\r\n            <Header></Header>\r\n            <Content>\r\n                <Row justify='center'>\r\n                    <Col span={22}>\r\n                        {props.children}\r\n                    </Col>\r\n                </Row>\r\n            </Content>\r\n            <Footer>Footer</Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default MainLayout\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport Home from './pages/Home';\nimport { AppProvider } from './context/AppContext';\nimport Login from './pages/Login';\nimport MainLayout from './layout/MainLayout';\nimport { BASE_URL, LOGIN_URL } from './urlLinks';\n\nfunction App() {\n  return (\n    <AppProvider>\n      <MainLayout>\n        <Router>\n          <Switch>\n            <Route path={LOGIN_URL}>\n              <Login />\n            </Route>\n            <Route path={BASE_URL}>\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </MainLayout>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}